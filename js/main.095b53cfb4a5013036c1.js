"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["main"],{

/***/ 806:
/*!********************!*\
  !*** ./app/app.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ 616);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _baseEngine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./baseEngine */ 574);\n/* harmony import */ var _cameraController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cameraController */ 754);\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config */ 671);\n/* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./interface */ 222);\n/* harmony import */ var _sceneManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sceneManager */ 686);\n/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utilities */ 701);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! three */ 856);\n/* harmony import */ var _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tweenjs/tween.js */ 253);\n\n\n\n\n\n\n\n\n\n\n//App Class\nclass App extends _baseEngine__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n\n    //App Constructor\n    constructor() {\n\n        //Base class constructor\n        super();\n\n        //Whether any load error set\n        this.loadErrorSet = false;\n        //Whether demo started\n        this.demoStarted = false;\n\n        //Meta configuration object\n        this.meta = {};\n\n        // Make sure scene is created before initializing SceneManager\n        this.scene = new three__WEBPACK_IMPORTED_MODULE_8__.Scene();\n        this.manager.scene = this.scene;  // Add scene to manager\n\n        //Create camera controller\n        this.cameraController = new _cameraController__WEBPACK_IMPORTED_MODULE_2__.CameraController(this.renderer, window.innerWidth / window.innerHeight);\n        \n        //Initialize SceneManager with manager that has scene\n        _sceneManager__WEBPACK_IMPORTED_MODULE_5__.SceneManager.init(this.manager).catch(error => {\n            console.error('Failed to initialize SceneManager:', error);\n        });\n\n        //Event listener  - Loading Manager Progress\n        this.manager.onProgress = this.onLoadProgress.bind(this);\n        //Event listener  - Loading Manager Error\n        this.manager.onError = this.onLoadError.bind(this);\n        //Event listener  - Loading Manager Completed\n        this.manager.onLoad = this.onLoadCompleted.bind(this);\n\n        //Event Listener - Window resize\n        window.addEventListener('resize', this.onContextResized.bind(this), true);\n        //Event Listener - Start Demo Button Click\n        jquery__WEBPACK_IMPORTED_MODULE_0___default()('#btn-start-demo')[0].addEventListener('click', this.startDemo.bind(this));\n\n        //Event Listener - Entity color change\n        _interface__WEBPACK_IMPORTED_MODULE_4__.Interface.setOnEntityColor(_sceneManager__WEBPACK_IMPORTED_MODULE_5__.SceneManager.setEntityColor);\n        //Event Listener - Entity visibility change\n        _interface__WEBPACK_IMPORTED_MODULE_4__.Interface.setOnEntityVisible(_sceneManager__WEBPACK_IMPORTED_MODULE_5__.SceneManager.setEntityVisible);\n\n        //Initialize the scene\n        this.setupScene();\n\n        //Recalculate context\n        this.onContextResized();\n\n        //Start update routine\n        this.update();\n\n        //Progress counter\n        this.loadingProgress = 0;\n        this.totalAssets = 0;\n        this.loadedAssets = 0;\n        this.transitionProgress = 0;\n\n        // Make engine instance globally available\n        window.engine = this;\n    }\n\n    //Initialize the configurator scene\n    async setupScene() {\n        try {\n            console.log('Setting up scene...');\n            \n            // Make sure scene is properly initialized\n            if (!this.scene) {\n                this.scene = new three__WEBPACK_IMPORTED_MODULE_8__.Scene();\n                this.manager.scene = this.scene;\n            }\n\n            // Load the Active model post meta data fetch\n            _utilities__WEBPACK_IMPORTED_MODULE_6__.NetworkUtils.fetchMeta(_config__WEBPACK_IMPORTED_MODULE_3__.ACTIVE_PATH, meta => {\n                this.meta = meta;\n                _sceneManager__WEBPACK_IMPORTED_MODULE_5__.SceneManager.loadActiveModel(this.scene, this.meta).catch(error => {\n                    console.error('Failed to load active model:', error);\n                });\n            });\n        } catch (error) {\n            console.error('Error setting up scene:', error);\n        }\n    }\n\n    //Event - LoaderManager error\n    onLoadError(item) {\n\n        //Remove Loader Icon\n        jquery__WEBPACK_IMPORTED_MODULE_0___default()('#preloader .icon').remove();\n        //Display load error\n        jquery__WEBPACK_IMPORTED_MODULE_0___default()('#preloader .title').text(\"ERROR LOADING\");\n        //Display the load error item\n        jquery__WEBPACK_IMPORTED_MODULE_0___default()('#preloader .desc').text(item);\n\n        //Set error flag\n        this.loadErrorSet = true;\n    }\n\n    //Event - LoaderManager progress\n    onLoadProgress(item, loaded, total) {\n        //Ignore if any load error occurred\n        if (this.loadErrorSet)\n            return;\n\n        //Update total assets count first time\n        if (this.totalAssets === 0) {\n            this.totalAssets = total;\n        }\n        this.loadedAssets = loaded;\n\n        //Calculate progress percentage\n        const progress = Math.floor((this.loadedAssets / this.totalAssets) * 100);\n        \n        //Update progress bar and text\n        jquery__WEBPACK_IMPORTED_MODULE_0___default()('.progress-bar').css('width', progress + '%');\n        jquery__WEBPACK_IMPORTED_MODULE_0___default()('.progress-text').text(progress + '%');\n        \n        //Update preloader description with current loading item\n        jquery__WEBPACK_IMPORTED_MODULE_0___default()('#preloader .desc').text(item);\n    }\n\n    //Event - LoaderManager finished\n    onLoadCompleted() {\n        //Ignore if any load error occurred\n        if (this.loadErrorSet)\n            return;\n\n        //Update preloader content\n        jquery__WEBPACK_IMPORTED_MODULE_0___default()('#preloader .icon').remove();\n        jquery__WEBPACK_IMPORTED_MODULE_0___default()('#preloader .logo').show();\n        jquery__WEBPACK_IMPORTED_MODULE_0___default()('#preloader .title').text('Toyota Kijang Innova');\n        jquery__WEBPACK_IMPORTED_MODULE_0___default()('#preloader .desc').html('Zenix HEV Configurator');\n        jquery__WEBPACK_IMPORTED_MODULE_0___default()('#preloader .btn-main').show();\n        \n        //Hide progress bar when loading complete\n        jquery__WEBPACK_IMPORTED_MODULE_0___default()('#loading-progress').hide();\n    }\n\n    //Event - Render context resized\n    onContextResized() {\n\n        //Set new renderer size\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        //Set new camera projection\n        this.cameraController.setAspect(window.innerWidth / window.innerHeight);\n    }\n\n    //Method - Start the demo\n    startDemo() {\n        //Ignore if any load error set or demo already started\n        if (this.loadErrorSet || this.demoStarted) return;\n\n        //State demo started \n        this.demoStarted = true;\n\n        //Show progress bar and hide start button\n        jquery__WEBPACK_IMPORTED_MODULE_0___default()('#btn-start-demo').hide();\n        jquery__WEBPACK_IMPORTED_MODULE_0___default()('#loading-progress').show();\n\n        // Reset progress\n        jquery__WEBPACK_IMPORTED_MODULE_0___default()('.progress-bar').css('width', '0%');\n        jquery__WEBPACK_IMPORTED_MODULE_0___default()('.progress-text').text('0%');\n\n        // Mulai loading scene dengan waktu yang lebih singkat\n        this.loadSceneAsync().then(() => {\n            // Langsung transisi tanpa delay tambahan\n            _utilities__WEBPACK_IMPORTED_MODULE_6__.AnimUtils.fadeElementOut(jquery__WEBPACK_IMPORTED_MODULE_0___default()('#preloader')[0], 500, element => {\n                element.remove();\n                this.cameraController.mainCamera = this.cameraController.orbitCamera;\n                this.cameraController.setAspect(window.innerWidth / window.innerHeight);\n                _interface__WEBPACK_IMPORTED_MODULE_4__.Interface.initialize(this.meta);\n            });\n        });\n    }\n\n    // Method untuk loading scene secara async\n    async loadSceneAsync() {\n        return new Promise(async (resolve) => {\n            let sceneProgress = 0;\n            const totalProgress = 100;\n            const updateInterval = 20;\n            \n            // Setup promises untuk loading komponen\n            const setupPromises = {\n                lights: this.setupLights(),\n                materials: this.setupMaterials(),\n                textures: this.setupTextures()\n            };\n\n            const updateProgress = async () => {\n                if (sceneProgress < totalProgress) {\n                    sceneProgress += 1; // Lebih halus\n                    \n                    // Update UI\n                    jquery__WEBPACK_IMPORTED_MODULE_0___default()('.progress-bar').css('width', sceneProgress + '%');\n                    jquery__WEBPACK_IMPORTED_MODULE_0___default()('.progress-text').text(Math.floor(sceneProgress) + '%');\n\n                    // Check progress dan tunggu komponen selesai loading\n                    if (sceneProgress === 99) {\n                        await Promise.all(Object.values(setupPromises));\n                        \n                        // Set initial camera position for default environment\n                        if (this.cameraController) {\n                            this.cameraController.updateCameraForEnvironment('default');\n                        }\n                    }\n\n                    setTimeout(updateProgress, updateInterval);\n                } else {\n                    resolve();\n                }\n            };\n\n            // Mulai progress\n            updateProgress();\n        });\n    }\n\n    // Setup components dengan Promise\n    async setupLights() {\n        return new Promise(async (resolve) => {\n            try {\n                const lights = [\n                    // Main directional light - sesuaikan intensitas dan posisi\n                    new three__WEBPACK_IMPORTED_MODULE_8__.DirectionalLight(0xffffff, 1.5),\n                    \n                    // Ambient light dengan intensitas lebih tinggi\n                    new three__WEBPACK_IMPORTED_MODULE_8__.AmbientLight(0xffffff, 0.6),\n                    \n                    // Point lights untuk detail garasi\n                    new three__WEBPACK_IMPORTED_MODULE_8__.PointLight(0xffffff, 1.0),\n                    new three__WEBPACK_IMPORTED_MODULE_8__.PointLight(0xffffff, 1.0)\n                ];\n                \n                // Sesuaikan posisi directional light\n                lights[0].position.set(10, 20, 10);\n                lights[0].castShadow = true;\n                \n                // Posisikan point lights di dalam garasi\n                lights[2].position.set(-10, 15, 0);\n                lights[3].position.set(10, 15, 0);\n                \n                // Add lights to scene\n                lights.forEach(light => this.scene.add(light));\n                \n                // Configure shadow properties\n                if (lights[0].shadow) {\n                    lights[0].shadow.mapSize.width = 2048;\n                    lights[0].shadow.mapSize.height = 2048;\n                    lights[0].shadow.camera.near = 0.5;\n                    lights[0].shadow.camera.far = 500;\n                    lights[0].shadow.bias = -0.0001;\n                }\n\n                console.log('Lights setup completed');\n                resolve(lights);\n            } catch (error) {\n                console.error('Error setting up lights:', error);\n                resolve(null);\n            }\n        });\n    }\n\n    async setupMaterials() {\n        return new Promise(async (resolve) => {\n            try {\n                const materials = {\n                    basic: new three__WEBPACK_IMPORTED_MODULE_8__.MeshBasicMaterial({ color: 0xffffff }),\n                    phong: new three__WEBPACK_IMPORTED_MODULE_8__.MeshPhongMaterial({ color: 0xffffff })\n                };\n\n                console.log('Materials setup completed');\n                resolve(materials);\n            } catch (error) {\n                console.error('Error setting up materials:', error);\n                resolve(null);\n            }\n        });\n    }\n\n    async setupTextures() {\n        return new Promise(async (resolve) => {\n            try {\n                const textureLoader = new three__WEBPACK_IMPORTED_MODULE_8__.TextureLoader();\n                textureLoader.setPath(_config__WEBPACK_IMPORTED_MODULE_3__.STAGE_PATH + 'scene_1/textures/');\n                \n                // Update material textures mapping to always use PNG/JPG\n                const materialTextures = {\n                    'adskMatjalanan': ['adskMatjalananbasecolortexture.png'],\n                    'fasades': ['M_2.png', 'fasadesbasecolortexture.png'],\n                    'fasades2': ['fasades2basecolortexture.png'],\n                    'details': ['detailsbasecolortexture.png'],\n                    'KB3D_CTS_Sidewalk': ['KB3D_CTS_Sidewalkbasecolortexture.png'],\n                    'KB3D_CTS_SteelRoughBlackT': ['adskMatKB3D_CTS_SteelRoughBlackTbasecolortexture.png'],\n                    'conblock': ['conblockbasecolortexture.png', 'conblockmetallicroughnesstex.png'],\n                    'bg_oke': ['bg_okebasecolortexture.png'],\n                    'KB3D_CTS_ConcreteDecorA': ['KB3D_CTS_ConcreteDecorAbasecolortexture.png'],\n                    'KB3D_CTS_GreenHedge': ['KB3D_CTS_GreenHedgebasecolortexture.png'],\n                    'KB3D_CTS_LeafAtlas': ['KB3D_CTS_LeafAtlasbasecolortexture.png'],\n                    'KB3D_CTS_TreeWalnutBark': ['KB3D_CTS_TreeWalnutBarkbasecolortexture.png'],\n                    'KB3D_CTS_Lamps': ['KB3D_CTS_Lampsbasecolortexture.png'],\n                    'KB3D_CTS_MetalPaintGrayA': ['KB3D_CTS_MetalPaintGrayAbasecolortexture.png'],\n                    'adskMatrumput': ['adskMatrumputbasecolortexture.png']\n                };\n\n                // Load textures berdasarkan konfigurasi\n                const textures = await Promise.all(\n                    Object.entries(materialTextures).flatMap(([materialName, textureTypes]) =>\n                        textureTypes.map(type => loadTextureWithWebP(type))\n                    )\n                );\n\n                console.log('Textures setup completed');\n                resolve(textures.filter(Boolean));\n            } catch (error) {\n                console.error('Error setting up textures:', error);\n                resolve(null);\n            }\n        });\n    }\n\n    //App Update\n    update() {\n        super.update();\n        \n        // Update TWEEN animations\n        _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_7__.update();\n        \n        this.cameraController.update();\n        \n        this.renderer.render(this.scene, this.cameraController.mainCamera);\n        requestAnimationFrame(this.update.bind(this));\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new App());\n\n//# sourceURL=webpack:///./app/app.js?");

/***/ }),

/***/ 574:
/*!***************************!*\
  !*** ./app/baseEngine.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ BaseEngine)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! three */ 856);\n/* harmony import */ var three_examples_jsm_helpers_RectAreaLightHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three/examples/jsm/helpers/RectAreaLightHelper */ 210);\n/* harmony import */ var three_examples_jsm_libs_stats_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three/examples/jsm/libs/stats.module */ 811);\n/* harmony import */ var three_examples_jsm_lights_RectAreaLightUniformsLib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three/examples/jsm/lights/RectAreaLightUniformsLib */ 336);\n/* harmony import */ var three_examples_jsm_loaders_EXRLoader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three/examples/jsm/loaders/EXRLoader */ 284);\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./config */ 671);\n/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utilities */ 701);\n/* harmony import */ var three_examples_jsm_loaders_GLTFLoader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! three/examples/jsm/loaders/GLTFLoader */ 594);\n\n\n\n\n\n\n\n\n\n\n//Whether to show fps counter or not\nconst IS_DEBUG = false;\n\n//Scene background color\nconst SCENE_COLOR = 0x000000;\n\n//Area Light Dimension\nconst LIGHT_SIZE = new three__WEBPACK_IMPORTED_MODULE_7__.Vector2(12, 6);\n//Area Light Intensity\nconst LIGHT_INTENSITY = 8;\n//Area Light Color\nconst LIGHT_COLOR = 0xffffff;\n//Area Light - Left\nconst LIGHT_POS_LEFT = new three__WEBPACK_IMPORTED_MODULE_7__.Vector3(0, 16, -18);\nconst LIGHT_ROT_LEFT = _utilities__WEBPACK_IMPORTED_MODULE_5__.MathUtils.vector3DegToRadian({ x: -135, y: 0, z: -180 });\n//Area Light - Right\nconst LIGHT_POS_RIGHT = new three__WEBPACK_IMPORTED_MODULE_7__.Vector3(0, 16, 18);\nconst LIGHT_ROT_RIGHT = _utilities__WEBPACK_IMPORTED_MODULE_5__.MathUtils.vector3DegToRadian({ x: -45, y: 0, z: 0 });\n\n//------------------------------------------------------------ PRIVATE HELPER METHODS ------------------------------------------------------------\n\n//Create an AreaLight with Helper\nconst createAreaLight = (color, intensity, size, visible) => {\n\n    //Create an area light with parameters\n    var rectLight = new three__WEBPACK_IMPORTED_MODULE_7__.RectAreaLight(color, intensity, size.x, size.y);\n\n    //Create a light helper if set to visible\n    if (visible) {\n        const rectHelper = new three_examples_jsm_helpers_RectAreaLightHelper__WEBPACK_IMPORTED_MODULE_0__.RectAreaLightHelper(rectLight, 0xffffff);\n        rectLight.add(rectHelper);\n    }\n\n    //Return the resultant light object\n    return rectLight;\n}\n\n//------------------------------------------------------------ ENGINE ABSTRACT CLASS ------------------------------------------------------------\n\nclass BaseEngine {\n\n    //Class constructor\n    constructor() {\n\n        //Initialize Area Light Plugin Lib\n        three_examples_jsm_lights_RectAreaLightUniformsLib__WEBPACK_IMPORTED_MODULE_2__.RectAreaLightUniformsLib.init();\n\n        //Create engine renderer\n        this.renderer = new three__WEBPACK_IMPORTED_MODULE_7__.WebGLRenderer({ antialias: true });\n        this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.renderer.setClearColor(SCENE_COLOR, 1);\n        this.renderer.sortObjects = false;\n        this.renderer.toneMapping = three__WEBPACK_IMPORTED_MODULE_7__.ACESFilmicToneMapping;\n        this.renderer.toneMappingExposure = 1.2;\n        this.renderer.outputEncoding = three__WEBPACK_IMPORTED_MODULE_7__.sRGBEncoding;\n\n        //Append renderer to body context\n        document.body.appendChild(this.renderer.domElement);\n\n        //Create root scene node\n        this.scene = new three__WEBPACK_IMPORTED_MODULE_7__.Scene();\n\n        //Set scene fog to make soft ground edges\n        this.scene.fog = new three__WEBPACK_IMPORTED_MODULE_7__.Fog(SCENE_COLOR, 45, 150);\n\n        //Add a Left Light\n        const mLeftLight = createAreaLight(LIGHT_COLOR, LIGHT_INTENSITY, LIGHT_SIZE, IS_DEBUG);\n        mLeftLight.position.copy(LIGHT_POS_LEFT);\n        mLeftLight.rotation.copy(LIGHT_ROT_LEFT)\n        this.scene.add(mLeftLight);\n\n        //Add a Right Light\n        const mRightLight = createAreaLight(LIGHT_COLOR, LIGHT_INTENSITY, LIGHT_SIZE, IS_DEBUG);\n        mRightLight.position.copy(LIGHT_POS_RIGHT);\n        mRightLight.rotation.copy(LIGHT_ROT_RIGHT);\n        this.scene.add(mRightLight);\n\n        //Create a loader manager\n        this.manager = new three__WEBPACK_IMPORTED_MODULE_7__.LoadingManager();\n\n        //Pre-Filtered, Mip-Mapped Radiance Environment Generator\n        const pmremGenerator = new three__WEBPACK_IMPORTED_MODULE_7__.PMREMGenerator(this.renderer);\n        //Precompile to use equirectangular shader to support equirectangular HDR maps\n        pmremGenerator.compileEquirectangularShader();\n\n        //Store current environment assets\n        this.currentEnvironment = {\n            exrMap: null,\n            skybox: null,\n            planar: null\n        };\n\n        //Initialize environment loaders\n        this.exrLoader = new three_examples_jsm_loaders_EXRLoader__WEBPACK_IMPORTED_MODULE_3__.EXRLoader(this.manager);\n        this.cubeLoader = new three__WEBPACK_IMPORTED_MODULE_7__.CubeTextureLoader(this.manager);\n        this.gltfLoader = new three_examples_jsm_loaders_GLTFLoader__WEBPACK_IMPORTED_MODULE_6__.GLTFLoader(this.manager);\n        \n        //Initialize PMREM\n        this.pmremGenerator = new three__WEBPACK_IMPORTED_MODULE_7__.PMREMGenerator(this.renderer);\n        this.pmremGenerator.compileEquirectangularShader();\n\n        //If FPS enabled\n        if (IS_DEBUG) {\n            //Create new profiler object\n            this.profiler = (0,three_examples_jsm_libs_stats_module__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n            //Append profiler to body context\n            document.body.appendChild(this.profiler.dom);\n        }\n\n        // Enable shadow mapping\n        this.renderer.shadowMap.enabled = true;\n        this.renderer.shadowMap.type = three__WEBPACK_IMPORTED_MODULE_7__.PCFSoftShadowMap;\n\n        // Add directional light for shadows\n        const dirLight = new three__WEBPACK_IMPORTED_MODULE_7__.DirectionalLight(0xffffff, 1);\n        dirLight.position.set(5, 10, 5);\n        dirLight.castShadow = true;\n        \n        // Configure shadow properties\n        dirLight.shadow.mapSize.width = 2048;\n        dirLight.shadow.mapSize.height = 2048;\n        dirLight.shadow.camera.near = 0.5;\n        dirLight.shadow.camera.far = 50;\n        dirLight.shadow.camera.left = -20;\n        dirLight.shadow.camera.right = 20;\n        dirLight.shadow.camera.top = 20;\n        dirLight.shadow.camera.bottom = -20;\n        \n        this.scene.add(dirLight);\n\n        // Optimize memory usage\n        this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        \n        // Enable texture compression\n        this.renderer.capabilities.maxTextures = Math.min(\n            this.renderer.capabilities.maxTextures,\n            16\n        );\n        \n        // Dispose unused textures and materials\n        this.disposedItems = new Set();\n\n        // Add environment check\n        this.isDevelopment = \"development\" !== 'production';\n    }\n\n    //Update method\n    update() {\n\n        //Update profiler if enabled\n        if (IS_DEBUG && this.profiler)\n            this.profiler.update();\n    }\n\n    //Add new method to update environment\n    async updateEnvironment(config) {\n        const { exr, cubemap, planar, color } = config;\n        console.log('Updating environment with config:', config);\n\n        try {\n            // Cleanup previous environment\n            this.cleanupEnvironment();\n\n            // Handle environment lighting\n            if (exr) {\n                const exrTexture = await this.exrLoader\n                    .setDataType(three__WEBPACK_IMPORTED_MODULE_7__.HalfFloatType)\n                    .setPath(_config__WEBPACK_IMPORTED_MODULE_4__.EXR_PATH)\n                    .loadAsync(exr);\n\n                const envMap = this.pmremGenerator.fromEquirectangular(exrTexture).texture;\n                this.scene.environment = envMap;\n                this.currentEnvironment.exrMap = envMap;\n                exrTexture.dispose();\n            }\n\n            // Handle skybox/background\n            if (cubemap) {\n                const extension = this.isDevelopment ? 'png' : 'webp';\n                console.log(`Loading cubemap from: ${_config__WEBPACK_IMPORTED_MODULE_4__.CUBEMAP_PATH}${cubemap} with extension: ${extension}`);\n                \n                const cubemapFiles = [\n                    `px.${extension}`, `nx.${extension}`,\n                    `py.${extension}`, `ny.${extension}`,\n                    `pz.${extension}`, `nz.${extension}`\n                ];\n\n                try {\n                    const skyboxTexture = await this.cubeLoader\n                        .setPath(_config__WEBPACK_IMPORTED_MODULE_4__.CUBEMAP_PATH + cubemap)\n                        .loadAsync(cubemapFiles);\n\n                    this.scene.background = skyboxTexture;\n                    this.currentEnvironment.skybox = skyboxTexture;\n                } catch (error) {\n                    console.error('Failed to load WebP cubemap, falling back to PNG:', error);\n                    \n                    // Fallback to PNG if WebP fails in production\n                    if (!this.isDevelopment) {\n                        const pngFiles = [\n                            'px.png', 'nx.png',\n                            'py.png', 'ny.png',\n                            'pz.png', 'nz.png'\n                        ];\n                        \n                        const fallbackTexture = await this.cubeLoader\n                            .setPath(_config__WEBPACK_IMPORTED_MODULE_4__.CUBEMAP_PATH + cubemap)\n                            .loadAsync(pngFiles);\n\n                        this.scene.background = fallbackTexture;\n                        this.currentEnvironment.skybox = fallbackTexture;\n                    }\n                }\n            } else {\n                const backgroundColor = color ? new three__WEBPACK_IMPORTED_MODULE_7__.Color(color) : new three__WEBPACK_IMPORTED_MODULE_7__.Color(SCENE_COLOR);\n                this.scene.background = backgroundColor;\n            }\n\n            // Handle planar model\n            if (planar) {\n                console.log('Loading planar from:', _config__WEBPACK_IMPORTED_MODULE_4__.STAGE_PATH + planar);\n                const gltf = await this.gltfLoader\n                    .setPath(_config__WEBPACK_IMPORTED_MODULE_4__.STAGE_PATH)\n                    .loadAsync(planar);\n                \n                // Set scale untuk menyesuaikan dengan repeat texture 20x20\n                const baseScale = 20;  // Sesuai dengan repeat texture\n                gltf.scene.scale.set(baseScale, baseScale, baseScale);\n                \n                // Optimize planar model materials dan tambah roughness\n                gltf.scene.traverse(child => {\n                    if (child.isMesh) {\n                        if (child.material) {\n                            // Tambah roughness sebesar 50% dari nilai saat ini\n                            const currentRoughness = child.material.roughness || 0;\n                            child.material.roughness = Math.min(1, currentRoughness * 1.5);\n                            \n                            if (child.material.map) {\n                                child.material.map.repeat.set(20, 20);\n                                child.material.map.wrapS = three__WEBPACK_IMPORTED_MODULE_7__.RepeatWrapping;\n                                child.material.map.wrapT = three__WEBPACK_IMPORTED_MODULE_7__.RepeatWrapping;\n                            }\n                        }\n                    }\n                });\n\n                this.scene.add(gltf.scene);\n                this.currentEnvironment.planar = gltf.scene;\n            }\n\n        } catch (error) {\n            console.error('Error updating environment:', error);\n            this.cleanupEnvironment();\n        }\n    }\n\n    // Add cleanup method\n    cleanupEnvironment() {\n        if (this.currentEnvironment.exrMap) {\n            this.currentEnvironment.exrMap.dispose();\n            this.scene.environment = null;\n        }\n\n        if (this.currentEnvironment.skybox) {\n            this.currentEnvironment.skybox.dispose();\n            this.scene.background = new three__WEBPACK_IMPORTED_MODULE_7__.Color(SCENE_COLOR);\n        }\n\n        if (this.currentEnvironment.planar) {\n            this.scene.remove(this.currentEnvironment.planar);\n            this.currentEnvironment.planar.traverse(child => {\n                if (child.isMesh) {\n                    child.geometry.dispose();\n                    child.material.dispose();\n                }\n            });\n        }\n\n        // Reset current environment\n        this.currentEnvironment = {\n            exrMap: null,\n            skybox: null,\n            planar: null\n        };\n    }\n\n    // Override dispose method\n    dispose() {\n        this.cleanupEnvironment();\n        this.renderer.dispose();\n        // Dispose other resources...\n    }\n}\n\n\n\n//# sourceURL=webpack:///./app/baseEngine.js?");

/***/ }),

/***/ 754:
/*!*********************************!*\
  !*** ./app/cameraController.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CameraController: () => (/* binding */ CameraController)\n/* harmony export */ });\n/* harmony import */ var _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tweenjs/tween.js */ 253);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ 856);\n/* harmony import */ var three_examples_jsm_controls_OrbitControls__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three/examples/jsm/controls/OrbitControls */ 970);\n/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utilities */ 701);\n\n\n\n\n\n//The camera startup position - adjusted for different environments\nconst ORBIT_CAM_POS = {\n    default: new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(-35, 15, 20),\n    city: new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(-35, 15, 20),\n    garage: new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(-35, 4.5, 20)\n};\n\n//The camera lookAt target - adjusted for different environments\nconst ORBIT_CAM_TARGET = {\n    default: new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(0, 5, 0),\n    city: new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(0, 5, 0),\n    garage: new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(0, 2.25, 0)\n};\n\n//The cinematic sequence position array\nconst CINE_SEQUENCE_POINTS =\n    [\n        {\n            sP: { x: -28, y: -26, z: 3.5 },\n            eP: { x: -25, y: -23, z: 3.5 },\n            cR: { x: 0.0, y: -45, z: 5.0 },\n            tD: 9500\n        },\n        {\n            sP: { x: -18, y: 0, z: 2.5 },\n            eP: { x: -18, y: 0, z: 5.5 },\n            cR: { x: 0.0, y: -90, z: 0.0 },\n            tD: 5000\n        },\n        {\n            sP: { x: -13.50, y: -3.75, z: 3.75 },\n            eP: { x: -12.00, y: -5.50, z: 4.50 },\n            cR: { x: -41.79, y: -42.36, z: -19.55 },\n            tD: 7000\n        },\n        {\n            sP: { x: -10.50, y: -8.0, z: 1.50 },\n            eP: { x: -14.00, y: -12.0, z: 1.00 },\n            cR: { x: 10.12, y: -43.88, z: -7.06 },\n            tD: 7000\n        },\n        {\n            sP: { x: -13, y: -14, z: 14 },\n            eP: { x: 11, y: -14, z: 14 },\n            cR: { x: -38.28, y: 0.0, z: 0.0 },\n            tD: 12000\n        },\n        {\n            sP: { x: 12.85, y: -1.0, z: 4.35 },\n            eP: { x: 12.85, y: 0.70, z: 4.35 },\n            cR: { x: 47.34, y: 50.53, z: -33.90 },\n            tD: 7000\n        },\n        {\n            sP: { x: 13, y: -4.5, z: 2.5 },\n            eP: { x: 13, y: -4.5, z: 5.0 },\n            cR: { x: 0, y: 58, z: 5.35 },\n            tD: 7000\n        },\n        {\n            sP: { x: -3.3, y: -6.5, z: 5.0 },\n            eP: { x: 1.2, y: -6.5, z: 5.35 },\n            cR: { x: -30.65, y: -55.53, z: -1.88 },\n            tD: 5000\n        },\n        {\n            sP: { x: -13.85, y: -0.35, z: 3.15 },\n            eP: { x: -14.50, y: -1.1, z: 3.75 },\n            cR: { x: -35.54, y: -35.16, z: -15.17 },\n            tD: 8000\n        }\n    ];\n\nclass CameraController {\n\n    //Class constructor\n    constructor(renderer, aspect) {\n\n        //Callback Handler - OnCineComplete\n        this.onCineComplete = () => void 0;\n\n        //Array to keep all cinematic shot tweens\n        this.mCineShotsList = [];\n\n        //Create Cinematic Camera\n        this.cineCamera = new three__WEBPACK_IMPORTED_MODULE_3__.PerspectiveCamera(45, aspect, 0.1, 100);\n        this.cineCamera.position.copy(CINE_SEQUENCE_POINTS[0].sP)\n        this.cineCamera.rotation.copy(_utilities__WEBPACK_IMPORTED_MODULE_2__.MathUtils.vector3DegToRadian(CINE_SEQUENCE_POINTS[0].cR))\n\n        //Create Orbit Camera\n        this.orbitCamera = new three__WEBPACK_IMPORTED_MODULE_3__.PerspectiveCamera(60, aspect, 0.1, 100);\n        this.orbitCamera.position.copy(ORBIT_CAM_POS.default);\n\n        //Create OrbitControl\n        this.orbitControls = new three_examples_jsm_controls_OrbitControls__WEBPACK_IMPORTED_MODULE_1__.OrbitControls(this.orbitCamera, renderer.domElement);\n        this.orbitControls.target = ORBIT_CAM_TARGET.default;\n        this.orbitControls.enablePan = true;\n        this.orbitControls.enableZoom = true;\n        this.orbitControls.enableDamping = true;\n        this.orbitControls.minPolarAngle = 0;\n        this.orbitControls.maxPolarAngle = Math.PI / 2;\n        this.orbitControls.dampingFactor = 0.05;\n        this.orbitControls.rotateSpeed = 0.07;\n        this.orbitControls.minDistance = 17;\n        this.orbitControls.maxDistance = 48;\n        this.orbitControls.autoRotate = false;\n        this.orbitControls.autoRotateSpeed = 0.05;\n        this.orbitControls.colliderMeshes = [];\n\n        //Set cine camera as startup camera\n        this.mainCamera = this.cineCamera;\n\n        //Iterate through each sequence position array\n        for (var i = 0; i < CINE_SEQUENCE_POINTS.length; i++) {\n\n            //Get the tween starting point vector\n            var tweenStartPoint = _utilities__WEBPACK_IMPORTED_MODULE_2__.MathUtils.coordR2L(CINE_SEQUENCE_POINTS[i].sP);\n            //Get the tween end point vector\n            var tweenEndPoint = _utilities__WEBPACK_IMPORTED_MODULE_2__.MathUtils.coordR2L(CINE_SEQUENCE_POINTS[i].eP);\n            //Get the duration for this tween\n            var tweenDuration = CINE_SEQUENCE_POINTS[i].tD;\n\n            //Create the cinematic tween for current sequence\n            var cineTween = new _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Tween(tweenStartPoint).to(tweenEndPoint, tweenDuration).easing(_tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Easing.Linear.None);\n\n            //On Tween Start\n            cineTween.onStart(((id) => {\n\n                //Apply camera rotation for the tween\n                return () => this.cineCamera.rotation.copy(_utilities__WEBPACK_IMPORTED_MODULE_2__.MathUtils.vector3DegToRadian(CINE_SEQUENCE_POINTS[id].cR))\n\n            })(i));\n\n            //On Tween Update\n            cineTween.onUpdate(pos => { this.cineCamera.position.set(pos.x, pos.y, pos.z); })\n\n            //Add the cinematic tween to shots list\n            this.mCineShotsList.push(cineTween);\n\n            //Chain the shot to previous\n            if (i > 0)\n                this.mCineShotsList[i - 1].chain(this.mCineShotsList[i]);\n        }\n\n        //Event will be triggered when the last tween is completed\n        this.mCineShotsList[this.mCineShotsList.length - 1].onComplete(() => this.onCineComplete());\n    }\n\n    //Event Setter - OnCineComplete\n    setOnCineComplete = (cb) => this.onCineComplete = cb;\n\n    //Update\n    update() {\n\n        //Update orbit controls if main camera is orbit camera\n        if (this.mainCamera === this.orbitCamera)\n            this.orbitControls.update();\n\n        //Update Tween Library\n        _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.update();\n    }\n\n    //Set new aspect and update projection\n    setAspect(aspect) {\n\n        //Recalculate aspect for main camera\n        this.mainCamera.aspect = aspect;\n        //Update the projection matrix\n        this.mainCamera.updateProjectionMatrix();\n    }\n\n    startCinematic() {\n\n        //Stop ongoing cinematic shot chaining\n        this.stopCinematic();\n\n        //Start the first shot in cinematic sequence\n        this.mCineShotsList[0].start();\n    }\n\n    //Stop cinematic camera movement\n    stopCinematic() {\n        this.mCineShotsList.forEach(shot => shot.stop());\n    }\n\n    // Add method to update camera position based on environment\n    updateCameraForEnvironment(environmentType) {\n        const position = ORBIT_CAM_POS[environmentType] || ORBIT_CAM_POS.default;\n        const target = ORBIT_CAM_TARGET[environmentType] || ORBIT_CAM_TARGET.default;\n\n        // Create tweens for smooth transition\n        new _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Tween(this.orbitCamera.position)\n            .to({ x: position.x, y: position.y, z: position.z }, 1000)\n            .easing(_tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Easing.Cubic.InOut)\n            .start();\n\n        new _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Tween(this.orbitControls.target)\n            .to({ x: target.x, y: target.y, z: target.z }, 1000)\n            .easing(_tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Easing.Cubic.InOut)\n            .start();\n    }\n}\n\n//# sourceURL=webpack:///./app/cameraController.js?");

/***/ }),

/***/ 671:
/*!***********************!*\
  !*** ./app/config.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ACTIVE_PATH: () => (/* binding */ ACTIVE_PATH),\n/* harmony export */   CUBEMAP_PATH: () => (/* binding */ CUBEMAP_PATH),\n/* harmony export */   EXR_FILE: () => (/* binding */ EXR_FILE),\n/* harmony export */   EXR_PATH: () => (/* binding */ EXR_PATH),\n/* harmony export */   STAGE_PATH: () => (/* binding */ STAGE_PATH)\n/* harmony export */ });\n/*\n * Project :WebGL Car Configurator\n * File: config.js\n * Description : Asset configuration file\n * Date : 10/09/2021\n * License : MIT\n * Author : RendercodeNinja\n * URL : https://github.com/RendercodeNinja\n */\n\n//Model Paths\nconst STAGE_PATH = 'assets/stage/';\nconst ACTIVE_PATH = 'assets/zenix/';\nconst EXR_PATH = 'assets/exr/';\nconst EXR_FILE = 'royal_esplanade_1k.exr';\n// Cubemap textures path\nconst CUBEMAP_PATH = 'assets/cubemap/';\n\n//# sourceURL=webpack:///./app/config.js?");

/***/ }),

/***/ 222:
/*!**************************!*\
  !*** ./app/interface.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Interface: () => (/* binding */ Interface)\n/* harmony export */ });\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ 616);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ 671);\n/* harmony import */ var _sceneManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sceneManager */ 686);\n/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utilities */ 701);\n/* harmony import */ var _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tweenjs/tween.js */ 253);\n\n\n\n\n\n\n//Configurator Palette HTML Layout\nconst PALETTE_HTML = jquery__WEBPACK_IMPORTED_MODULE_0___default()(`<div class=\"config-palette\">\n\n        <div class=\"config-palette__wrapper\">\n\n            <ul class=\"config-tab__list\">\n\n                <li>\n                    <a class=\"config-tab\" data-id=\"body_colors\">\n                        <span>COLOR</span>\n                    </a>\n                </li>                \n\n                <li>\n                    <a class=\"config-tab\" data-id=\"wheel_designs\">\n                        <span>RIM</span>\n                    </a>\n                </li>\n\n                <li>\n                    <a class=\"config-tab\" data-id=\"accessories\">\n                        <span>ACCESORIES</span>\n                    </a>\n                </li>\n\n                <li>\n                    <a class=\"config-tab\" data-id=\"ambience\">\n                        <span>AMBIENCE</span>\n                    </a>\n                </li>\n\n                <li>\n                    <a class=\"config-tab\" data-id=\"interior\">\n                        <span>INTERIOR</span>\n                    </a>\n                </li>\n\n            </ul>\n\n            <div class=\"config-options__wrap\">\n                <div id=\"body_colors\" class=\"config-options\">\n                    <ul>\n                    </ul>\n                </div>\n\n                <div id=\"mirror_colors\" class=\"config-options\">\n                    <ul>\n                    </ul>\n                </div>\n\n                <div id=\"wheel_designs\" class=\"config-options\">\n                    <ul>\n                    </ul>\n                </div>\n\n                <div id=\"wheel_colors\" class=\"config-options\">\n                    <ul>\n                    </ul>\n                </div>\n\n                <div id=\"caliper_colors\" class=\"config-options\">\n                    <ul>\n                    </ul>\n                </div>\n\n                <div id=\"ambience\" class=\"config-options\">\n                    <ul>\n                    </ul>\n                </div>\n            </div>\n        </div>\n     </div>`);\n\n// Add new HTML for interior viewer\nconst INTERIOR_VIEWER_HTML = jquery__WEBPACK_IMPORTED_MODULE_0___default()(`\n    <div id=\"interior-viewer\" class=\"interior-viewer\">\n        <div id=\"panorama\"></div>\n        <button class=\"close-interior\">×</button>\n    </div>\n`);\n\n// Add CSS for interior viewer (you'll need to style this appropriately)\nconst INTERIOR_STYLES = `\n    .interior-viewer {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        z-index: 1000;\n        display: none;\n    }\n    #panorama {\n        width: 100%;\n        height: 100%;\n    }\n    .close-interior {\n        position: absolute;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.5);\n        border: none;\n        color: white;\n        font-size: 24px;\n        width: 40px;\n        height: 40px;\n        border-radius: 50%;\n        cursor: pointer;\n        z-index: 1001;\n    }\n`;\n\n// Add the styles to head\njquery__WEBPACK_IMPORTED_MODULE_0___default()('<style>').text(INTERIOR_STYLES).appendTo('head');\n\n//Singleton Interface Pattern\nconst Interface = (\n    function () {\n        // Private variables\n        let metaData = null;\n        let cBodyColor = null;\n        let cOVRMColor = null;\n        let cbOnEntityColor = null;\n        let cbOnEntityVisible = null;\n\n        // Tambahkan object untuk menyimpan state konfigurasi\n        let currentConfig = {\n            bodyColor: null,\n            mirrorColor: null, \n            wheelDesign: null,\n            wheelColor: null,\n            caliperColor: null\n        };\n\n        // Add helper function to get correct image extension\n        const getImageExtension = () => {\n            const isDevelopment = (\"development\" || 0).trim() !== \"production\";\n            return isDevelopment ? 'png' : 'webp';  // Reversed the condition\n        };\n\n        //Method - Append texture swatches for selected container\n        const appendTextureSwatches = (container, config, cb) => {\n\n            //Empty the container\n            jquery__WEBPACK_IMPORTED_MODULE_0___default()(container).empty();\n\n            //Iterate through each available design\n            config.colors.forEach(design => {\n\n                // Use correct extension based on environment\n                const ext = getImageExtension();\n                const url = `${_config__WEBPACK_IMPORTED_MODULE_1__.ACTIVE_PATH}/${design.thumb}.${ext}`;\n                //Compose the swatch element\n                const swatch = jquery__WEBPACK_IMPORTED_MODULE_0___default()(`<li><button class=\"texture-swatch\" draggable=\"true\"><span>${design.name}</span></button></li>`)\n                //Apply image as button background\n                jquery__WEBPACK_IMPORTED_MODULE_0___default()('button', swatch).css({ 'background-image': 'url(' + url + ')' });\n                \n                // Bind click callback\n                jquery__WEBPACK_IMPORTED_MODULE_0___default()('button', swatch).on('click', ((t) => {\n                    return () => handleTextureChange(t, config, cb);\n                })(design.value));\n\n                // Bind drag events\n                jquery__WEBPACK_IMPORTED_MODULE_0___default()('button', swatch).on('dragstart', (event) => {\n                    event.originalEvent.dataTransfer.setData('text/plain', JSON.stringify({\n                        type: 'texture',\n                        value: design.value\n                    }));\n                });\n\n                //Add the texture swatch to target container\n                jquery__WEBPACK_IMPORTED_MODULE_0___default()(container.append(swatch));\n            })\n\n            // Add drop handler for textures\n            jquery__WEBPACK_IMPORTED_MODULE_0___default()('.config-palette').parent().on('drop', (event) => {\n                const data = JSON.parse(event.originalEvent.dataTransfer.getData('text/plain'));\n                if (data.type === 'texture') {\n                    handleTextureChange(data.value, config, cb);\n                }\n            });\n        }\n\n        //Method - Append color swatches for selected container\n        const appendColorSwatches = (container, config, def, cb) => {\n\n            //Empty the container\n            jquery__WEBPACK_IMPORTED_MODULE_0___default()(container).empty();\n\n            //Get the color array\n            var colorList = config.colors.slice(0);\n\n            //If default color available\n            if (def)\n                colorList.unshift({ \"name\": \"Current\", \"value\": def });\n\n            //Iterate through each available colors\n            colorList.forEach(color => {\n\n                //Compose the swatch element\n                const swatch = jquery__WEBPACK_IMPORTED_MODULE_0___default()(`<li><button class=\"color-swatch\" draggable=\"true\"><span>${color.name}</span></button></li>`)\n                //Set the swatch color\n                jquery__WEBPACK_IMPORTED_MODULE_0___default()('button', swatch).css({ \"background\": color.value });\n                \n                // Bind click callback\n                jquery__WEBPACK_IMPORTED_MODULE_0___default()('button', swatch).on('click', ((e, c) => { \n                    return () => handleColorChange(e, c, config, cb);\n                })(config.target, color.value));\n\n                // Bind drag events\n                jquery__WEBPACK_IMPORTED_MODULE_0___default()('button', swatch).on('dragstart', (event) => {\n                    event.originalEvent.dataTransfer.setData('text/plain', JSON.stringify({\n                        target: config.target,\n                        color: color.value\n                    }));\n                });\n\n                //Add the color swatch to target container\n                jquery__WEBPACK_IMPORTED_MODULE_0___default()(container).append(swatch);\n            })\n\n            // Add drop zone for the car viewport\n            jquery__WEBPACK_IMPORTED_MODULE_0___default()('.config-palette').parent().on('dragover', (event) => {\n                event.preventDefault();\n            });\n\n            jquery__WEBPACK_IMPORTED_MODULE_0___default()('.config-palette').parent().on('drop', (event) => {\n                event.preventDefault();\n                const data = JSON.parse(event.originalEvent.dataTransfer.getData('text/plain'));\n                handleColorChange(data.target, data.color, config, cb);\n            });\n        }\n\n        // Helper function untuk handle perubahan warna\n        const handleColorChange = (target, color, config, cb) => {\n            // Tambahkan animasi TWEEN saat perubahan warna\n            const mesh = _sceneManager__WEBPACK_IMPORTED_MODULE_2__.SceneManager.getMeshByMaterialName(target);\n            if (mesh) {\n                const targetColor = _utilities__WEBPACK_IMPORTED_MODULE_3__.ColorUtils.webColorToHex(color);\n                const currentColor = {\n                    r: mesh.material.color.r,\n                    g: mesh.material.color.g,\n                    b: mesh.material.color.b\n                };\n\n                new _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_4__.Tween(currentColor)\n                    .to({\n                        r: targetColor.r,\n                        g: targetColor.g,\n                        b: targetColor.b\n                    }, 450) // Duration sama dengan di SceneManager\n                    .easing(_tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_4__.Easing.Quadratic.Out)\n                    .onUpdate(() => {\n                        mesh.material.color.setRGB(\n                            currentColor.r,\n                            currentColor.g,\n                            currentColor.b\n                        );\n                    })\n                    .start();\n            }\n\n            cb(target, color);\n            \n            // Update state berdasarkan target\n            switch(config.target) {\n                case 'Attitude_Black_pbr_shader53':\n                    currentConfig.bodyColor = color;\n                    break;\n                case 'Mt_MirrorCover':\n                    currentConfig.mirrorColor = color;\n                    break;\n                case 'Attitude_Black_pbr_shader59':\n                    currentConfig.wheelColor = color;\n                    break;\n                case 'Mt_BrakeCaliper':\n                    currentConfig.caliperColor = color;\n                    break;\n            }\n            \n            // Log current config state\n            console.log('Current Configuration:', currentConfig);\n        };\n\n        // Helper function untuk handle perubahan texture\n        const handleTextureChange = (value, config, cb) => {\n            cb(value);\n            currentConfig.wheelDesign = value;\n            \n            console.log('Current Configuration:', {\n                bodyColor: currentConfig.bodyColor,\n                mirrorColor: currentConfig.mirrorColor,\n                wheelDesign: currentConfig.wheelDesign,\n                wheelColor: currentConfig.wheelColor,\n                caliperColor: currentConfig.caliperColor\n            });\n        };\n\n        const appendAmbienceSwatches = (container, config, cb) => {\n            jquery__WEBPACK_IMPORTED_MODULE_0___default()(container).empty();\n\n            console.log('Appending ambience swatches:', config);\n\n            config.colors.forEach((ambience, index) => {\n                const swatch = jquery__WEBPACK_IMPORTED_MODULE_0___default()(`\n                    <li>\n                        <button class=\"config-swatch\" data-value=\"${ambience.value}\">\n                            <img src=\"${_config__WEBPACK_IMPORTED_MODULE_1__.ACTIVE_PATH}/${ambience.preview}\" alt=\"${ambience.name}\" />\n                            <span>${ambience.name}</span>\n                        </button>\n                    </li>\n                `);\n\n                // Add active class to default option\n                if (index === config.default) {\n                    jquery__WEBPACK_IMPORTED_MODULE_0___default()('button', swatch).addClass('active');\n                }\n\n                // Bind click event\n                jquery__WEBPACK_IMPORTED_MODULE_0___default()('button', swatch).on('click', function() {\n                    console.log('Ambience clicked:', ambience); // Log seluruh objek ambience\n                    \n                    jquery__WEBPACK_IMPORTED_MODULE_0___default()('.config-swatch', container).removeClass('active');\n                    jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).addClass('active');\n                    \n                    // Panggil callback dengan seluruh konfigurasi ambience\n                    if (cb) cb(ambience);\n                });\n\n                jquery__WEBPACK_IMPORTED_MODULE_0___default()(container).append(swatch);\n            });\n        };\n\n        //Event - Configuration Tab Clicked\n        const onConfigTabClicked = (item) => {\n\n            //Get the target tab\n            const target = jquery__WEBPACK_IMPORTED_MODULE_0___default()(item.currentTarget)\n            //Get target tab Id\n            const tabId = target.data('id');\n\n            //If the palette is already active\n            if (target.hasClass(\"active\")) {\n\n                //Empty the container\n                jquery__WEBPACK_IMPORTED_MODULE_0___default()(`#${tabId} > ul`, PALETTE_HTML).empty();\n                //Remove active and return\n                return target.removeClass('active');\n            }\n\n            //Deactivate all config tab links\n            jquery__WEBPACK_IMPORTED_MODULE_0___default()('.config-tab', PALETTE_HTML).removeClass('active');\n            //Hide all config tab contents\n            jquery__WEBPACK_IMPORTED_MODULE_0___default()('.config-options', PALETTE_HTML).hide();\n\n\n            //Get the target container for swatches\n            const container = jquery__WEBPACK_IMPORTED_MODULE_0___default()(`#${tabId} > ul`, PALETTE_HTML);\n\n            if (tabId === 'ambience') {\n                appendAmbienceSwatches(container, metaData[tabId], (ambienceConfig) => {\n                    // Pastikan kita mengirim seluruh konfigurasi ambience\n                    _sceneManager__WEBPACK_IMPORTED_MODULE_2__.SceneManager.updateEnvironment(window.camera, ambienceConfig);\n                });\n            } else if (tabId === 'wheel_designs') {\n                appendTextureSwatches(container, metaData[tabId], (target) => {\n                    //Return if callback not hooked\n                    if (!cbOnEntityColor) return;\n        \n                    //Invoke callback with the wheel design color value\n                    cbOnEntityColor(metaData[tabId].target, target);\n                });\n            }\n            //Add the color swatches\n            else {\n                appendColorSwatches(container, metaData[tabId], (tabId === 'mirror_colors') ? cBodyColor : null, (target, color) => {\n\n                    //Return if callback not hooked\n                    if (!cbOnEntityColor) return;\n\n                    //Invoke callback (For target)\n                    cbOnEntityColor(target, color);\n\n                    //Cache OVRM color if target\n                    if (target == 'Mt_MirrorCover') cOVRMColor = color;\n\n                    //If Body color is target\n                    if (target == 'Mt_Body') {\n\n                        //Cache new body color\n                        cBodyColor = color;\n\n                        //If OVRM color is not custom, apply body color to OVRM also\n                        if (metaData.mirror_colors.colors.filter(e => e.value === cOVRMColor).length === 0)\n                            cbOnEntityColor('Mt_MirrorCover', color);\n                    }\n                })\n            }\n\n            //Set the current clicked tab active\n            jquery__WEBPACK_IMPORTED_MODULE_0___default()(`.config-tab[data-id=${tabId}]`, PALETTE_HTML).addClass(\"active\");\n            //Show the active config palette content\n            jquery__WEBPACK_IMPORTED_MODULE_0___default()(`#${tabId}`, PALETTE_HTML).show();\n        }\n\n        //Method - Initialize Interface\n        const initialize = (meta) => {\n\n            //Cache meta data\n            metaData = meta;\n\n            // Set initial state\n            currentConfig.bodyColor = meta.body_colors.colors[meta.body_colors.default].value;\n            currentConfig.mirrorColor = meta.mirror_colors.colors[meta.mirror_colors.default].value;\n            currentConfig.wheelDesign = meta.wheel_designs.colors[meta.wheel_designs.default].value;\n            currentConfig.wheelColor = meta.wheel_colors.colors[meta.wheel_colors.default].value;\n            currentConfig.caliperColor = meta.caliper_colors.colors[meta.caliper_colors.default].value;\n\n            // Log initial config\n            console.log('Initial Configuration:', currentConfig);\n\n            //Append the Configurator palette to body\n            jquery__WEBPACK_IMPORTED_MODULE_0___default()('body').append(PALETTE_HTML);\n\n            // Add interior viewer to body\n            jquery__WEBPACK_IMPORTED_MODULE_0___default()('body').append(INTERIOR_VIEWER_HTML);\n\n            // Handle interior tab click\n            jquery__WEBPACK_IMPORTED_MODULE_0___default()('.config-tab[data-id=\"interior\"]').on('click', function() {\n                showInteriorView();\n            });\n\n            // Handle close button\n            jquery__WEBPACK_IMPORTED_MODULE_0___default()('.close-interior').on('click', function() {\n                jquery__WEBPACK_IMPORTED_MODULE_0___default()('#interior-viewer').hide();\n                // Re-enable orbit controls when closing interior view\n                if (window.APP) {\n                    window.APP.cameraController.enabled = true;\n                }\n            });\n\n            //Bind Event - Tab item clicked\n            jquery__WEBPACK_IMPORTED_MODULE_0___default()('.config-tab', PALETTE_HTML).on('click', onConfigTabClicked);\n        }\n\n        //Set Callback - Entity Color Change\n        const setOnEntityColor = (cb) => cbOnEntityColor = cb;\n        //Set Callback - Entity Visibility Change\n        const setOnEntityVisible = (cb) => cbOnEntityVisible = cb;\n\n        // Add method to get current config\n        const getCurrentConfig = () => {\n            return {...currentConfig};\n        }\n\n        // Add function to show interior view\n        const showInteriorView = () => {\n            // Disable orbit controls while in interior view\n            if (window.APP) {\n                window.APP.cameraController.enabled = false;\n            }\n\n            jquery__WEBPACK_IMPORTED_MODULE_0___default()('#interior-viewer').show();\n\n            // Initialize pannellum\n            pannellum.viewer('panorama', {\n                type: 'cubemap',\n                cubeMap: [\n                    `${_config__WEBPACK_IMPORTED_MODULE_1__.ACTIVE_PATH}/interior/front.jpg`,\n                    `${_config__WEBPACK_IMPORTED_MODULE_1__.ACTIVE_PATH}/interior/right.jpg`,\n                    `${_config__WEBPACK_IMPORTED_MODULE_1__.ACTIVE_PATH}/interior/back.jpg`,\n                    `${_config__WEBPACK_IMPORTED_MODULE_1__.ACTIVE_PATH}/interior/left.jpg`,\n                    `${_config__WEBPACK_IMPORTED_MODULE_1__.ACTIVE_PATH}/interior/top.jpg`,\n                    `${_config__WEBPACK_IMPORTED_MODULE_1__.ACTIVE_PATH}/interior/bottom.jpg`\n                ],\n                autoLoad: true,\n                autoRotate: -2,\n                compass: false\n            });\n        };\n\n        //Return Public Methods/Properties\n        return { initialize, setOnEntityColor, setOnEntityVisible, getCurrentConfig, showInteriorView }\n\n    }\n)();\n\n//# sourceURL=webpack:///./app/interface.js?");

/***/ }),

/***/ 686:
/*!*****************************!*\
  !*** ./app/sceneManager.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SceneManager: () => (/* binding */ SceneManager)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! three */ 856);\n/* harmony import */ var three_examples_jsm_loaders_GLTFLoader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three/examples/jsm/loaders/GLTFLoader */ 594);\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ 671);\n/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utilities */ 701);\n/* harmony import */ var _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tweenjs/tween.js */ 253);\n\n\n\n\n\n\n\n\n// Add helper function at the top\nconst getWebPTexturePath = (path) => {\n    return path.replace(/\\.(png|jpg|jpeg)$/, '.webp');\n};\n\n// Update texture loading in both init and updateEnvironment functions\nconst textureLoader = new three__WEBPACK_IMPORTED_MODULE_4__.TextureLoader();\ntextureLoader.setPath(_config__WEBPACK_IMPORTED_MODULE_1__.STAGE_PATH + 'garage/textures/');\n\n// Update helper function untuk load texture\nconst loadTextureWithWebP = (texturePath) => {\n    return new Promise((resolve, reject) => {\n        // In development, always use original format\n        if (true) {\n            textureLoader.load(\n                texturePath,\n                texture => {\n                    texture.encoding = three__WEBPACK_IMPORTED_MODULE_4__.sRGBEncoding;\n                    resolve(texture);\n                },\n                undefined,\n                reject\n            );\n            return;\n        }\n\n        // In production, try WebP first then fallback\n        const webpPath = texturePath.replace(/\\.(png|jpg|jpeg)$/, '.webp');\n        textureLoader.load(\n            webpPath,\n            texture => {\n                texture.encoding = three__WEBPACK_IMPORTED_MODULE_4__.sRGBEncoding;\n                resolve(texture);\n            },\n            undefined,\n            () => {\n                // Fallback to original format if WebP fails\n                textureLoader.load(\n                    texturePath,\n                    texture => {\n                        texture.encoding = three__WEBPACK_IMPORTED_MODULE_4__.sRGBEncoding;\n                        resolve(texture);\n                    },\n                    undefined,\n                    reject\n                );\n            }\n        );\n    });\n};\n\n// Add helper function to create shadow texture\nconst createShadowTexture = () => {\n    const canvas = document.createElement('canvas');\n    canvas.width = 14.2;\n    canvas.height = 34.6;\n    const context = canvas.getContext('2d');\n\n    // Create radial gradient\n    const gradient = context.createRadialGradient(\n        canvas.width / 2, canvas.height / 2, 0,\n        canvas.width / 2, canvas.height / 2, canvas.width / 3\n    );\n\n    // Update gradient stops with new colors\n    gradient.addColorStop(0, 'rgba(0,0,0,0.3)');\n    gradient.addColorStop(1, 'rgba(0,0,0,0.15)');\n\n    // Fill with gradient\n    context.fillStyle = gradient;\n    context.fillRect(0, 0, canvas.width, canvas.height);\n\n    const texture = new three__WEBPACK_IMPORTED_MODULE_4__.CanvasTexture(canvas);\n    texture.needsUpdate = true;\n    return texture;\n};\n\nconst SceneManager = (() => {\n\n    //glTF Loader\n    let glTFLoader = null;\n    //Reference to the model object\n    let mActiveModel = null;\n    let skyboxModel = null;\n    let currentEnvironment = 'default';\n    let scene = null;\n\n    // Default colors for car parts\n    const dfCol_Body = new three__WEBPACK_IMPORTED_MODULE_4__.Color(0xf2f2f2);      // Pearl White\n    const dfCol_Mirror = new three__WEBPACK_IMPORTED_MODULE_4__.Color(0xf2f2f2);    // Pearl White untuk mirror\n    const dfCol_Alloys = new three__WEBPACK_IMPORTED_MODULE_4__.Color(0x1a1a1a);    // Dark Grey untuk velg\n    const dfCol_Caliper = new three__WEBPACK_IMPORTED_MODULE_4__.Color(0xFF0000);   // Red untuk kaliper\n\n    //Method - Initialize SceneManager\n    const init = (loaderManager) => {\n        if (!loaderManager || !loaderManager.scene) {\n            console.error('LoaderManager or scene is undefined');\n            return Promise.reject(new Error('Invalid LoaderManager'));\n        }\n\n        glTFLoader = new three_examples_jsm_loaders_GLTFLoader__WEBPACK_IMPORTED_MODULE_0__.GLTFLoader(loaderManager);\n        scene = loaderManager.scene;  // Store scene reference\n\n        // Set default environment\n        scene.background = new three__WEBPACK_IMPORTED_MODULE_4__.Color(0xf2f2f2);\n        scene.environment = null;\n\n        // Hide garage model by default\n        if (skyboxModel) {\n            skyboxModel.visible = false;\n        }\n\n        // Initialize default environment with ground plane\n        const groundPlane = createTransparentGroundPlane(loaderManager, false);\n        scene.add(groundPlane);\n\n        currentEnvironment = 'default';\n        console.log('Default environment initialized');\n\n        return Promise.resolve();\n    };\n\n    //Method - Load Stage Model\n    const loadStage = (targetScene, model) => {\n        //Throw error if SceneManager not initialized\n        if (!glTFLoader)\n            throw new Error('SceneManager init should be called.');\n\n        scene = targetScene;\n        \n        // Set default white background\n        scene.background = new three__WEBPACK_IMPORTED_MODULE_4__.Color(0xf2f2f2);\n        scene.environment = null;\n        \n        // Remove any existing ground plane\n        const existingGroundPlane = scene.getObjectByName('transparentGroundPlane');\n        if (existingGroundPlane) {\n            scene.remove(existingGroundPlane);\n        }\n\n        // Add default ground plane\n        const groundPlane = createTransparentGroundPlane(glTFLoader?.manager, false);\n        scene.add(groundPlane);\n        \n        if (skyboxModel) {\n            skyboxModel.visible = false;\n            scene.add(skyboxModel);\n            console.log('Garage model added to scene but hidden');\n        }\n\n        // Ensure default environment is set\n        currentEnvironment = 'default';\n        console.log('Default environment loaded in stage');\n    }\n\n    //Method - Load Active Model with Meta\n    const loadActiveModel = (targetScene, meta) => {\n        // Use passed scene or fallback to stored scene\n        const sceneToUse = targetScene || scene;\n        if (!sceneToUse) {\n            console.error('No valid scene available');\n            return Promise.reject(new Error('No valid scene'));\n        }\n\n        return new Promise((resolve, reject) => {\n            glTFLoader.setPath(_config__WEBPACK_IMPORTED_MODULE_1__.ACTIVE_PATH).load('model_original.glb', model => {\n                //Cache active model for this instance\n                mActiveModel = model.scene;\n\n                // Set initial position and scale for all environments\n                mActiveModel.position.set(0, 0, 0);\n                mActiveModel.scale.set(5.2, 5.2, 5.2);\n                mActiveModel.rotation.y = Math.PI / 2;\n\n                // Add transparent ground plane\n                const planeGeometry = new three__WEBPACK_IMPORTED_MODULE_4__.PlaneGeometry(100, 100);\n                const planeMaterial = new three__WEBPACK_IMPORTED_MODULE_4__.MeshPhysicalMaterial({\n                    color: 0xffffff,\n                    transparent: true,\n                    opacity: 0.1,\n                    metalness: 0.2,\n                    roughness: 0.1,\n                    clearcoat: 0.3,\n                    clearcoatRoughness: 0.2,\n                    side: three__WEBPACK_IMPORTED_MODULE_4__.DoubleSide\n                });\n                \n                const groundPlane = new three__WEBPACK_IMPORTED_MODULE_4__.Mesh(planeGeometry, planeMaterial);\n                groundPlane.rotation.x = -Math.PI / 2;\n                groundPlane.position.y = -2;\n                groundPlane.receiveShadow = true;\n                groundPlane.name = 'transparentGroundPlane';\n                sceneToUse.add(groundPlane);\n\n                // Sesuaikan ukuran shadow berdasarkan dimensi mobil yang sebenarnya\n                const carLength = 10.86; // Panjang mobil\n                const carWidth = 24.71;  // Lebar mobil\n                \n                // Shadow size sesuai spesifikasi\n                const shadowWidth = carWidth * 1.3;   // 1.3x lebar mobil\n                const shadowLength = carLength * 1.4;  // 1.4x panjang mobil\n                \n                const shadowPlaneGeometry = new three__WEBPACK_IMPORTED_MODULE_4__.PlaneGeometry(shadowWidth, shadowLength);\n                const shadowPlaneMaterial = new three__WEBPACK_IMPORTED_MODULE_4__.MeshBasicMaterial({\n                    map: new three__WEBPACK_IMPORTED_MODULE_4__.TextureLoader().load(_config__WEBPACK_IMPORTED_MODULE_1__.ACTIVE_PATH + 'shadow.jpg'),\n                    transparent: true,\n                    opacity: 0.45,  // Set base opacity to 45%\n                    depthWrite: false,\n                    blending: three__WEBPACK_IMPORTED_MODULE_4__.MultiplyBlending\n                });\n\n                const shadowPlane = new three__WEBPACK_IMPORTED_MODULE_4__.Mesh(shadowPlaneGeometry, shadowPlaneMaterial);\n                shadowPlane.rotation.x = -Math.PI / 2;\n                shadowPlane.position.y = 0.01; // Tetap di atas planar\n                shadowPlane.position.z = -carWidth * 0.1; // Sedikit disesuaikan ke belakang\n                shadowPlane.name = 'carShadowPlane';\n                sceneToUse.add(shadowPlane);\n\n                // Setup materials\n                mActiveModel.traverse(obj => {\n                    if (obj instanceof three__WEBPACK_IMPORTED_MODULE_4__.Mesh) {\n                        obj.castShadow = true;\n                        obj.receiveShadow = true;\n\n                        //Set Color - Body to Pearl White with more glossy finish\n                        if (obj.material.name === 'Attitude_Black_pbr_shader53') {\n                            obj.material.color = dfCol_Body;\n                            obj.material.metalness = 0.8;    // Increased from 0.7\n                            obj.material.roughness = 0.1;    // Decreased from 0.2\n                            obj.material.envMapIntensity = 1.2; // Added env map intensity\n                            obj.material.clearcoat = 0.8;    // Added clearcoat\n                            obj.material.clearcoatRoughness = 0.1; // Added clearcoat roughness\n                        }\n                                                \n                        //Set Color - Alloys with metallic finish\n                        if (obj.material.name === 'Attitude_Black_pbr_shader59') {\n                            obj.material.color = dfCol_Alloys;\n                            obj.material.metalness = 0.9;    // Increased from 0.8\n                            obj.material.roughness = 0.2;    // Decreased from 0.3\n                            obj.material.envMapIntensity = 1.1;\n                        }\n\n                        // Set properties for car windows - make them darker with adjusted alpha blend\n                        if (obj.material.name === 'Attitude_Black_pbr_shader54') {\n                            obj.material = new three__WEBPACK_IMPORTED_MODULE_4__.MeshPhysicalMaterial({\n                                color: new three__WEBPACK_IMPORTED_MODULE_4__.Color(0x1A1A1A),  // Nilai tengah antara 0x222222 dan 0x111111\n                                transparent: true,\n                                opacity: 0.8,  // Nilai tengah antara 0.5 dan 0.65\n                                transmission: 0.35,  // Nilai tengah antara 0.4 dan 0.3\n                                metalness: 0.9,\n                                roughness: 0.35,\n                                envMapIntensity: 1.2,\n                                clearcoat: 1.0,\n                                clearcoatRoughness: 0.1,\n                                side: three__WEBPACK_IMPORTED_MODULE_4__.DoubleSide,\n                                blending: three__WEBPACK_IMPORTED_MODULE_4__.CustomBlending,\n                                blendEquation: three__WEBPACK_IMPORTED_MODULE_4__.AddEquation,\n                                blendSrc: three__WEBPACK_IMPORTED_MODULE_4__.SrcAlphaFactor,\n                                blendDst: three__WEBPACK_IMPORTED_MODULE_4__.OneMinusSrcAlphaFactor\n                            });\n                            obj.material.name = 'Attitude_Black_pbr_shader54';\n                        }\n\n                        // Set properties for tail lights - make them more transparent with alpha blending\n                        if (obj.material.name === 'Attitude_Black_pbr_shader66') {\n                            obj.material = new three__WEBPACK_IMPORTED_MODULE_4__.MeshPhysicalMaterial({\n                                color: new three__WEBPACK_IMPORTED_MODULE_4__.Color(0xff0000),  // Merah\n                                emissive: new three__WEBPACK_IMPORTED_MODULE_4__.Color(0xff0000),\n                                emissiveIntensity: 0.5,\n                                transparent: true,\n                                opacity: 0.3,  // Lebih transparan\n                                transmission: 0.7,  // Menambah transmisi cahaya\n                                metalness: 0.0,\n                                roughness: 0.1,\n                                clearcoat: 0.5,\n                                clearcoatRoughness: 0.1,\n                                side: three__WEBPACK_IMPORTED_MODULE_4__.DoubleSide,\n                                blending: three__WEBPACK_IMPORTED_MODULE_4__.CustomBlending,\n                                blendEquation: three__WEBPACK_IMPORTED_MODULE_4__.AddEquation,\n                                blendSrc: three__WEBPACK_IMPORTED_MODULE_4__.SrcAlphaFactor,\n                                blendDst: three__WEBPACK_IMPORTED_MODULE_4__.OneMinusSrcAlphaFactor\n                            });\n                            obj.material.name = 'Attitude_Black_pbr_shader66';\n                        }\n                    }\n                });\n\n                sceneToUse.add(mActiveModel);\n\n                // Initialize ambience UI after model loads\n                initAmbienceUI(meta);\n\n                const box = new three__WEBPACK_IMPORTED_MODULE_4__.Box3().setFromObject(mActiveModel);\n                const size = box.getSize(new three__WEBPACK_IMPORTED_MODULE_4__.Vector3());\n                console.log('Ukuran mobil:', {\n                    panjang: size.z,\n                    lebar: size.x,\n                    tinggi: size.y\n                });\n\n                resolve();\n            }, undefined, reject);\n        });\n    };\n\n    //Method - Set entity color by material name\n    const setEntityColor = (targetMat, webColor) => {\n        //Iterate through the Aventador model\n        mActiveModel.traverse(obj => {\n            //If object is a mesh with material\n            if (obj instanceof three__WEBPACK_IMPORTED_MODULE_4__.Mesh) {\n                //If material name matched\n                if (obj.material.name === targetMat) {\n\n                    // Convert target web color to THREE.Color\n                    const targetColor = _utilities__WEBPACK_IMPORTED_MODULE_2__.ColorUtils.webColorToHex(webColor);\n\n                    // Get current color values\n                    const currentColor = {\n                        r: obj.material.color.r,\n                        g: obj.material.color.g,\n                        b: obj.material.color.b\n                    };\n\n                    // Create tween for smooth color transition\n                    new _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_3__.Tween(currentColor)\n                        .to({\n                            r: targetColor.r,\n                            g: targetColor.g,\n                            b: targetColor.b\n                        }, 450) // Duration in milliseconds\n                        .easing(_tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_3__.Easing.Quadratic.Out)\n                        .onUpdate(() => {\n                            obj.material.color.setRGB(\n                                currentColor.r,\n                                currentColor.g,\n                                currentColor.b\n                            );\n                        })\n                        .start();\n                }\n            }\n        });\n    }\n\n    //Method - Set entity visibility by object name\n    const setEntityVisible = (targetName) => {\n\n        //Iterate through the Aventador model\n        mActiveModel.traverse(obj => {\n\n            //If this is a rim object\n            if (obj.name.includes('Obj_Rim')) {\n\n                //Show if name matches target, else hide it\n                obj.visible = obj.name.includes(targetName)\n            }\n\n        });\n    }\n\n    const createTransparentGroundPlane = (loaderManager, isCity = false) => {\n        const groundGeometry = new three__WEBPACK_IMPORTED_MODULE_4__.PlaneGeometry(isCity ? 4000 : 100, isCity ? 4000 : 100);\n        \n        let groundMaterial;\n        \n        if (isCity) {\n            // Create textured ground for city environment\n            const textureLoader = new three__WEBPACK_IMPORTED_MODULE_4__.TextureLoader(loaderManager);\n            const groundTexture = textureLoader.load(_config__WEBPACK_IMPORTED_MODULE_1__.CUBEMAP_PATH + 'ny.jpg');\n            groundTexture.wrapS = three__WEBPACK_IMPORTED_MODULE_4__.RepeatWrapping;\n            groundTexture.wrapT = three__WEBPACK_IMPORTED_MODULE_4__.RepeatWrapping;\n            groundTexture.repeat.set(20, 20);\n            \n            groundMaterial = new three__WEBPACK_IMPORTED_MODULE_4__.MeshStandardMaterial({ \n                map: groundTexture,\n                color: 0x808080,\n                transparent: true,\n                opacity: 0.5,\n                roughness: 0.8,\n                metalness: 0.1,\n                side: three__WEBPACK_IMPORTED_MODULE_4__.DoubleSide\n            });\n        } else {\n            // Enhanced transparent ground for default environment\n            groundMaterial = new three__WEBPACK_IMPORTED_MODULE_4__.MeshPhysicalMaterial({\n                color: 0xffffff,\n                transparent: true,\n                opacity: 0.15, // Slightly increased for better shadow visibility\n                metalness: 0.2,\n                roughness: 0.1,\n                clearcoat: 0.3,\n                clearcoatRoughness: 0.2,\n                side: three__WEBPACK_IMPORTED_MODULE_4__.DoubleSide\n            });\n        }\n\n        const ground = new three__WEBPACK_IMPORTED_MODULE_4__.Mesh(groundGeometry, groundMaterial);\n        ground.rotation.x = -Math.PI / 2;\n        ground.position.y = isCity ? -0.01 : -2;\n        ground.receiveShadow = true;\n        ground.name = 'transparentGroundPlane';\n        return ground;\n    };\n\n    // Method untuk update skybox saja\n    const updateEnvironment = async (camera, ambienceConfig) => {\n        try {\n            if (!window.engine) {\n                console.error('Engine instance not found');\n                return;\n            }\n\n            // Remove existing ground plane if switching from default\n            if (currentEnvironment === 'default') {\n                const existingGroundPlane = scene.getObjectByName('transparentGroundPlane');\n                if (existingGroundPlane) {\n                    scene.remove(existingGroundPlane);\n                }\n            }\n\n            // Add ground plane only for default environment\n            if (ambienceConfig.value === 'default') {\n                const groundPlane = createTransparentGroundPlane(glTFLoader?.manager, false);\n                scene.add(groundPlane);\n            }\n\n            // Update environment\n            await window.engine.updateEnvironment({\n                exr: ambienceConfig.exr,\n                cubemap: ambienceConfig.cubemap,\n                planar: ambienceConfig.planar,\n                color: ambienceConfig.color\n            });\n\n            // Update camera position\n            if (camera && camera.updateCameraForEnvironment) {\n                camera.updateCameraForEnvironment(ambienceConfig.value);\n            }\n\n            // Update shadow plane visibility and opacity based on environment\n            const shadowPlane = scene.getObjectByName('carShadowPlane');\n            if (shadowPlane) {\n                shadowPlane.visible = true;\n                if (shadowPlane.material) {\n                    // Adjust opacity based on environment\n                    shadowPlane.material.opacity = ambienceConfig.value === 'default' ? 0.3 : 0.15;\n                    shadowPlane.position.y = 0.01; // Tetap konsisten di atas planar\n                }\n            }\n\n            currentEnvironment = ambienceConfig.value;\n            console.log(`Environment updated to: ${ambienceConfig.value}`);\n        } catch (error) {\n            console.error('Error updating environment:', error);\n        }\n    };\n\n    // Method untuk update environment berdasarkan konfigurasi ambience\n    const initAmbienceUI = (meta) => {\n        const ambienceContainer = document.querySelector('.ambience-options');\n        if (!ambienceContainer) return;\n\n        ambienceContainer.innerHTML = '';\n\n        meta.ambience.colors.forEach((ambience, index) => {\n            const option = document.createElement('div');\n            option.className = `ambience-option ${index === meta.ambience.default ? 'active' : ''}`;\n            option.setAttribute('data-value', ambience.value);\n            \n            // Gunakan path lengkap untuk preview image\n            const previewPath = `assets/zenix/${ambience.preview}`;\n            \n            option.innerHTML = `\n                <img src=\"${previewPath}\" alt=\"${ambience.name}\" \n                     onerror=\"this.src='assets/zenix/thumbnails/default_thumb.png'\"/>\n                <span>${ambience.name}</span>\n            `;\n\n            option.addEventListener('click', async () => {\n                document.querySelectorAll('.ambience-option').forEach(opt => {\n                    opt.classList.remove('active');\n                });\n                option.classList.add('active');\n                \n                // Gunakan await karena updateEnvironment adalah async\n                await updateEnvironment(window.camera, ambience);\n            });\n\n            ambienceContainer.appendChild(option);\n        });\n    };\n\n    //Method - Get mesh by material name\n    const getMeshByMaterialName = (materialName) => {\n        let targetMesh = null;\n        \n        //Iterate through the model\n        mActiveModel.traverse(obj => {\n            if (obj instanceof three__WEBPACK_IMPORTED_MODULE_4__.Mesh && obj.material.name === materialName) {\n                targetMesh = obj;\n            }\n        });\n        \n        return targetMesh;\n    }\n\n    //Return Public Methods/Properties\n    return { \n        init, \n        loadStage, \n        loadActiveModel, \n        setEntityColor, \n        setEntityVisible, \n        updateEnvironment,\n        getMeshByMaterialName,\n        initAmbienceUI \n    };\n\n})();\n\n\n\n//# sourceURL=webpack:///./app/sceneManager.js?");

/***/ }),

/***/ 701:
/*!**************************!*\
  !*** ./app/utilities.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnimUtils: () => (/* binding */ AnimUtils),\n/* harmony export */   ColorUtils: () => (/* binding */ ColorUtils),\n/* harmony export */   MathUtils: () => (/* binding */ MathUtils),\n/* harmony export */   NetworkUtils: () => (/* binding */ NetworkUtils)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ 856);\n\n\n// Color Utility methods\nconst ColorUtils = {\n\n    //Convert web color format to hex color format (with Gamma correction)\n    webColorToHex: (webColor) => {\n\n        //Convert web color to hex base\n        const hex = parseInt(webColor.replace(\"#\", \"0x\"));\n\n        //Construct color from hex with Gamma Correction\n        return new three__WEBPACK_IMPORTED_MODULE_0__.Color(hex).convertSRGBToLinear();\n    }\n}\n\n//Network Utility methods\nconst NetworkUtils = {\n\n    //Fetches meta json at provided URL\n    fetchMeta: (path, onSuccess) => {\n\n        //Create an XML request\n        var xhr = new XMLHttpRequest();\n        //Set response type to json\n        xhr.responseType = 'json';\n        //Open metal url\n        xhr.open('GET', `${path}meta.json`, true);\n\n        //Load the url using xhr\n        xhr.onload = () => {\n\n            //Throw success if response available and status OK\n            if (xhr.status == 200 && xhr.response != null)\n                onSuccess(xhr.response)\n            //Else throw error\n            else\n                console.error('Error occurred loading meta JSON. Probably invalid JSON format.');\n        }\n\n        //Execute the xhr request\n        xhr.send(null);\n    }\n}\n\n//Custom Math Utility methods\nconst MathUtils = {\n\n    coordR2L: (point) => {\n\n        //Swap Y and Z with Z=-Y\n        return { x: point.x, y: point.z, z: -point.y };\n    },\n\n    vector3DegToRadian: (point) => {\n        //The per degree converter\n        var degree = Math.PI / 180;\n        //Return the new vector3 in radian\n        return new three__WEBPACK_IMPORTED_MODULE_0__.Euler(point.x * degree, point.y * degree, point.z * degree, 'XYZ');\n    }\n}\n\n//HTML Animation Utility methods\nconst AnimUtils = {\n\n    //Fade in an HTML element by duration\n    fadeElementIn: (element, duration = 500, options = { display: 'block' }, callback) => {\n\n        //Ignore if element not available\n        if (!element)\n            return;\n\n        //Set style to visible/display for opacity to apply\n        element.style.display = options.display;\n        element.style.visibility = \"visible\";\n        element.style.opacity = 0;\n        element.style.filter = \"alpha(opacity=0)\";\n\n        //Set initial opacity to 0\n        var opacity = 0;\n\n        //Timed recurring\n        var timer = setInterval(() => {\n\n            //Increment opacity linear\n            opacity += 50 / duration;\n\n            //Exit timer on max opacity\n            if (opacity >= 0.95) {\n\n                //Clear timer\n                clearInterval(timer);\n\n                //Set final values\n                opacity = 1;\n\n                //Invoke callback with element;\n                if (callback) callback(element)\n            }\n\n            //Apply updated opacity\n            element.style.opacity = opacity;\n            element.style.filter = \"alpha(opacity=\" + opacity * 100 + \")\";\n\n        }, 50);\n    },\n\n    //Fade out an HTML element by duration\n    fadeElementOut: (element, duration = 500, callback) => {\n\n        //Ignore if element not available\n        if (!element)\n            return;\n\n        //Opacity\n        let opacity = 1;\n\n        //Timer function\n        let timer = setInterval(() => {\n\n            //Decrement opacity linear\n            opacity -= 50 / duration;\n\n            //Exit timer on min opacity\n            if (opacity <= 0) {\n\n                //Clear timer\n                clearInterval(timer);\n\n                //Set final values\n                opacity = 0;\n                element.style.display = \"none\";\n                element.style.visibility = \"hidden\";\n\n                //Invoke callback with element;\n                if (callback)\n                    callback(element);\n            }\n\n            //Apply updated opacity\n            element.style.opacity = opacity;\n            element.style.filter = \"alpha(opacity=\" + opacity * 100 + \")\";\n\n        }, 50);\n    },\n\n    //Fades in volume of an audio element\n    fadeAudioIn: (audio, duration = 1000, options = { max: 1 }, callback) => {\n\n        //Ignore if audio not available\n        if (!audio)\n            return;\n\n        //Set start volume\n        let vol = 0;\n\n        //Reset volume\n        audio.volume = vol;\n        //Start if not playing\n        if (audio.paused) audio.play();\n\n        //Timer function\n        let timer = setInterval(() => {\n\n            //Increment volume linear\n            vol += 50 / duration;\n\n            if (vol >= options.max) {\n\n                //Clear timer\n                clearInterval(timer);\n\n                //Set final values\n                vol = options.max;\n\n                //Invoke callback with element;\n                if (callback) callback(audio)\n            }\n\n            //Apply updated volume\n            audio.volume = vol;\n\n        }, 50)\n    },\n\n    //Fades out volume of an audio element\n    fadeAudioOut: (audio, duration = 1000, callback) => {\n\n        //Ignore if audio not available\n        if (!audio)\n            return;\n\n        //Get start volume\n        let vol = audio.volume;\n\n        //Timer function\n        let timer = setInterval(() => {\n\n            //Decrement volume linear\n            vol -= 50 / duration;\n\n            if (vol <= 0) {\n\n                //Clear timer\n                clearInterval(timer);\n                //Set final values\n                vol = 0;\n\n                //Invoke callback with audio element;\n                if (callback) callback(audio);\n            }\n\n            //Apply updated volume\n            audio.volume = vol;\n\n        }, 50);\n\n    }\n}\n\n\n//# sourceURL=webpack:///./app/utilities.js?");

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["vendors"], () => (__webpack_exec__(806)));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);